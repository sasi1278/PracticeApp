name: Run Node Script on Merge

on:
  push:
    branches:
      - main  # Trigger only when changes are pushed to the main branch

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Node.js (Latest Stable)
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'  # Always use the latest stable version

      - name: Set Environment Variable for Merge Detection
        run: echo "MERGED_FROM_ANY=true" >> $GITHUB_ENV

      - name: Run Node.js Script to Update README
        if: env.MERGED_FROM_ANY == 'true'
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const { execSync } = require('child_process');

          const packageJsonPath = path.resolve(__dirname, 'package.json');
          const readmePath = path.resolve(__dirname, 'README.md');

          // Ensure package.json exists; create a default one if missing
          if (!fs.existsSync(packageJsonPath)) {
            fs.writeFileSync(
              packageJsonPath,
              JSON.stringify({ version: '1.0.0' }, null, 2)
            );
          }

          const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
          const version = packageJson.version;
          const releaseDate = new Date().toISOString().split('T')[0];

          // Ensure README.md exists
          if (!fs.existsSync(readmePath)) {
            fs.writeFileSync(readmePath, '# Project Documentation\n\n');
          }

          let readmeContent = fs.readFileSync(readmePath, 'utf8');

          const changeLogs = execSync('git log main --pretty=format:%s --no-merges -n 3')
          .toString()
          .trim()
          .split('\n')
          .map(line => {
            const match = line.match(/(ADH-\d+)/);
            return match ? `<a href='' style='color: #5DADE2;'>${match[1]}</a> | ${line.replace(match[1], '').trim()}` : line;
          })
          .join('\n\n');


          const newReleaseNotes = \`
          ## v\${version}

          **RELEASE DATE:** \${releaseDate}

          ### CHANGE LOGS
          \${changeLogs}
          \`;

          if (!readmeContent.includes(\`## v\${version}\`)) {
            readmeContent += \`\n\n\${newReleaseNotes}\`;
            fs.writeFileSync(readmePath, readmeContent);
          }
          "

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README.md with latest release notes" || echo "No changes to commit"
          git push
