name: Update README on Main branch

on:
  push:
    branches:
      - main
      
jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Check last commit author
        id: check_commit
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR" == "github-actions" || "$AUTHOR" == "$GITHUB_ACTOR" ]]; then
            echo "Skipping workflow to avoid infinite loop"
            exit 0
          fi

      - name: Ensure required tools are installed
        run: |
          set -e
          if ! command -v jq &> /dev/null; then
            echo "Error: jq is required but not installed."
            exit 1
          fi

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Current version: ${VERSION}"

      - name: Determine starting commit for version changelog
        id: start_commit
        run: |
          set -e
          # Find the first commit where the current version appears in package.json.
          # This uses git log in reverse order to pick the earliest commit that introduced the version.
          START_COMMIT=$(git log --reverse --pretty=format:"%h" -S"\"version\": \"${{ env.VERSION }}\"" package.json | head -n 1)
          if [ -z "$START_COMMIT" ]; then
            echo "Could not determine start commit; defaulting to beginning of history."
            START_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "START_COMMIT=${START_COMMIT}" >> $GITHUB_ENV
          echo "Using start commit: ${START_COMMIT}"

      - name: Extract triggering commit message
        id: latest_commit
        run: |
          set -e
          if [ ! -f README.md ]; then
            echo "README.md not found! Creating a new one."
            echo -e "## v${{ env.VERSION }}\n\n**RELEASE DATE:** $(date +'%Y-%m-%d')\n\n### CHANGE LOGS\n\n" > README.md
          fi

          # Only use the commit that triggered this workflow (GITHUB_SHA)
          COMMIT_LINE=$(git show -s --pretty=format:'%h %s' $GITHUB_SHA)
          
          # Normalize the commit message
          COMMIT_HASH=$(echo "$COMMIT_LINE" | awk '{print $1}')
          COMMIT_MESSAGE=$(echo "$COMMIT_LINE" | cut -d ' ' -f2-)
          NORMALIZED_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -E 's/\b([a-zA-Z]+)[[:space:]-]+([0-9]+)\b/\U\1-\2/g')
          
          if [[ "$NORMALIZED_MESSAGE" =~ ^([A-Z]+-[0-9]+)[[:space:]]*(.*) ]]; then
            JIRA_ID="${BASH_REMATCH[1]}"
            COMMIT_TEXT="${BASH_REMATCH[2]}"
            JIRA_LINK="[${JIRA_ID}](https://jira.example.com/browse/${JIRA_ID})"
            CHANGE_LOG="* <span style='color:skyblue;'>${JIRA_LINK}</span> - ${COMMIT_TEXT}\n"
          else
            CHANGE_LOG="* ${COMMIT_HASH} - ${COMMIT_MESSAGE}\n"
          fi
          
          echo -e "CHANGE_LOG<<EOF\n$CHANGE_LOG\nEOF" >> $GITHUB_ENV

      - name: Update README
        run: |
          set -e
          VERSION_HEADER="## v${{ env.VERSION }}"
          RELEASE_DATE="**RELEASE DATE:** $(date +'%Y-%m-%d')"
          CHANGE_LOG_ENTRY="${{ env.CHANGE_LOG }}"

          if grep -q "$VERSION_HEADER" README.md; then
            # Update the changelog section under the matching version header.
            awk -v version="$VERSION_HEADER" -v log_entry="$CHANGE_LOG_ENTRY" '
              BEGIN { updated=0 }
              $0 ~ version { print; inSection=1; next }
              inSection && /^## / { if (!updated) { print log_entry; updated=1 }; inSection=0 }
              { print }
              END { if (inSection && !updated) print log_entry }
            ' README.md > temp.md && mv temp.md README.md
          else
            # Prepend a new version section
            echo -e "$VERSION_HEADER\n\n$RELEASE_DATE\n\n### CHANGE LOGS\n\n$CHANGE_LOG_ENTRY\n\n$(cat README.md)" > README.md
          fi

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update README with changelog for v${{ env.VERSION }} [skip ci]" || echo "No changes to commit"
          git push
