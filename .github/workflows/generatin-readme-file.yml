name: Update README on Main branch

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Check last commit author
        id: check_commit
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR" == "github-actions" ]]; then
            echo "Skipping workflow to avoid infinite loop"
            exit 0
          fi

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Extract commits for new version
        id: commit_range
        run: |
          # Attempt to find the commit where the last version was added in README.md
          LAST_VERSION_COMMIT=$(git log --grep="^## v" --pretty=format:"%H" -n 1 README.md || true)
          if [ -z "$LAST_VERSION_COMMIT" ]; then
            echo "No previous version found; capturing all commits up to HEAD."
            RANGE="HEAD"
          else
            RANGE="${LAST_VERSION_COMMIT}..HEAD"
          fi

          echo "Using commit range: $RANGE"

          # Capture all commits in that range
          CHANGE_LOG=$(git log $RANGE --pretty=format:"* %h - %s")
          if [ -z "$CHANGE_LOG" ]; then
            CHANGE_LOG="* No new commits found"
          fi

          echo -e "CHANGE_LOG<<EOF\n$CHANGE_LOG\nEOF" >> $GITHUB_ENV

      - name: Update README
        run: |
          set -e
          # Construct header and changelog entries
          VERSION_HEADER="## v${VERSION}"
          RELEASE_DATE="**RELEASE DATE:** $(date +'%Y-%m-%d')"
          NEW_ENTRY="$VERSION_HEADER\n\n$RELEASE_DATE\n\n### CHANGE LOGS\n\n$CHANGE_LOG\n\n"
          
          # Check if README.md exists; if not, create one.
          if [ ! -f README.md ]; then
            echo -e "$NEW_ENTRY" > README.md
          else
            # Prepend the new version entry to the existing README
            echo -e "$NEW_ENTRY$(cat README.md)" > README.md
          fi

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes detected. Skipping commit."
            exit 0
          fi
          
          git commit -m "Update README with latest changelog [skip ci]"
          git push origin main
