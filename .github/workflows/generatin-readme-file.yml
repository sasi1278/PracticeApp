name: Update README on Main branch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Check last commit author
        id: check_commit
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR" == "github-actions" || "$AUTHOR" == "$GITHUB_ACTOR" ]]; then
            echo "Skipping workflow to avoid infinite loop"
            exit 0
          fi

      - name: Ensure required tools are installed
        run: |
          set -e
          if ! command -v jq &> /dev/null; then
            echo "Error: jq is required but not installed."
            exit 1
          fi

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Current version: ${VERSION}"

      - name: Extract triggering commit message
        id: latest_commit
        run: |
          set -e
          if [ ! -f README.md ]; then
            echo "README.md not found! Creating a new one."
            echo -e "" > README.md
          fi

          # Only use the commit that triggered this workflow
          COMMIT_LINE=$(git show -s --pretty=format:'%h %s' $GITHUB_SHA)
          
          # Normalize the commit message for potential JIRA ticket formatting
          COMMIT_HASH=$(echo "$COMMIT_LINE" | awk '{print $1}')
          COMMIT_MESSAGE=$(echo "$COMMIT_LINE" | cut -d ' ' -f2-)
          NORMALIZED_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -E 's/\b([a-zA-Z]+)[[:space:]-]+([0-9]+)\b/\U\1-\2/g')
          
          if [[ "$NORMALIZED_MESSAGE" =~ ^([A-Z]+-[0-9]+)[[:space:]]*(.*) ]]; then
            JIRA_ID="${BASH_REMATCH[1]}"
            COMMIT_TEXT="${BASH_REMATCH[2]}"
            JIRA_LINK="[${JIRA_ID}](https://jira.example.com/browse/${JIRA_ID})"
            CHANGE_LOG="* <span style='color:skyblue;'>${JIRA_LINK}</span> - ${COMMIT_TEXT}\n"
          else
            CHANGE_LOG="* ${COMMIT_HASH} - ${COMMIT_MESSAGE}\n"
          fi
          
          echo -e "CHANGE_LOG<<EOF\n$CHANGE_LOG\nEOF" >> $GITHUB_ENV

      - name: Update README in descending version order
        run: |
          set -e
          # Prepare the new section content for this version
          VERSION_HEADER="## v${{ env.VERSION }}"
          RELEASE_DATE="**RELEASE DATE:** $(date +'%Y-%m-%d')"
          NEW_SECTION="${VERSION_HEADER}\n\n${RELEASE_DATE}\n\n### CHANGE LOGS\n\n${CHANGE_LOG}"
          
          # If the README already contains this version header, update its changelog block.
          if grep -q "^${VERSION_HEADER}" README.md; then
            awk -v ver_header="${VERSION_HEADER}" -v new_sec="${NEW_SECTION}" '
              BEGIN { updating=0 }
              {
                if ($0 ~ "^" ver_header) {
                  print new_sec
                  updating=1
                  next
                }
                # Skip lines until we hit the next version header (or EOF)
                if (updating && $0 ~ /^##\ v/) { updating=0 }
                if (!updating) print $0
              }
            ' README.md > temp.md && mv temp.md README.md
          else
            # Insert the new section in descending order.
            # We assume the README lists version sections starting with "## v" in descending order.
            tmpfile=$(mktemp)
            inserted=0

            while IFS= read -r line; do
              # Check for a version header line
              if [[ "$line" =~ ^##\ v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
                existing_ver="${BASH_REMATCH[1]}"
                # Compare versions using sort -V.
                # If the new version is greater than the existing version, then new section should come before.
                if [ $inserted -eq 0 ]; then
                  higher=$(printf '%s\n' "${existing_ver}" "${{ env.VERSION }}" | sort -V | head -n1)
                  # If the lower value is the existing version, then ${{ env.VERSION }} is higher.
                  if [ "$higher" = "${existing_ver}" ]; then
                    printf "%b\n" "${NEW_SECTION}" >> "$tmpfile"
                    inserted=1
                  fi
                fi
              fi
              echo "$line" >> "$tmpfile"
            done < README.md

            # If not inserted (i.e. the new version is lower than any existing version), append it at the end.
            if [ $inserted -eq 0 ]; then
              printf "\n%b\n" "${NEW_SECTION}" >> "$tmpfile"
            fi

            mv "$tmpfile" README.md
          fi

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update README with changelog for v${{ env.VERSION }} [skip ci]" || echo "No changes to commit"
          git push
