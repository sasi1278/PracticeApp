name: Update README on Main branch

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Check last commit author
        id: check_commit
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR" == "github-actions" ]]; then
            echo "Skipping workflow to avoid infinite loop"
            exit 0
          fi

      - name: Get version from package.json
        id: package_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Extract latest commit message
        id: latest_commit
        run: |
          # Attempt to get the commit that touched README.md
          COMMIT_LINE=$(git log -1 HEAD --pretty=format:'%h %s' -- README.md)
          if [ -z "$COMMIT_LINE" ]; then
            echo "No commit found specifically for README.md, falling back to HEAD commit."
            COMMIT_LINE=$(git log -1 HEAD --pretty=format:'%h %s')
          fi
      
          # Debug output: show the commit line
          echo "Using commit line: $COMMIT_LINE"
      
          COMMIT_HASH=$(echo "$COMMIT_LINE" | awk '{print $1}')
          COMMIT_MESSAGE=$(echo "$COMMIT_LINE" | cut -d ' ' -f2-)
          
          # Fallback if commit message is empty (shouldn't normally happen)
          if [ -z "$COMMIT_MESSAGE" ]; then
            COMMIT_MESSAGE="No commit message provided"
          fi
      
          NORMALIZED_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -E 's/\b([a-zA-Z]+)[[:space:]-]+([0-9]+)\b/\U\1-\2/g')
          
          CHANGE_LOG=""
          if [[ "$NORMALIZED_MESSAGE" =~ ^([A-Z]+-[0-9]+)[[:space:]]*(.*) ]]; then
            JIRA_ID="${BASH_REMATCH[1]}"
            COMMIT_TEXT="${BASH_REMATCH[2]}"
            JIRA_LINK="[${JIRA_ID}](https://jira.example.com/browse/${JIRA_ID})"
            CHANGE_LOG+="* <span style='color:skyblue;'>${JIRA_LINK}</span> - ${COMMIT_TEXT}\n"
          else
            CHANGE_LOG+="* ${COMMIT_HASH} - ${COMMIT_MESSAGE}\n"
          fi
      
          echo -e "CHANGE_LOG<<EOF\n$CHANGE_LOG\nEOF" >> $GITHUB_ENV
      
      - name: Update README
        run: |
          VERSION="## v${{ env.VERSION }}"
          RELEASE_DATE="**RELEASE DATE:** $(date +'%Y-%m-%d')"
          CHANGE_LOG_ENTRY="${{ env.CHANGE_LOG }}"

          if grep -q "$VERSION" README.md; then
            # Insert commit message BELOW "CHANGE LOGS" section of the correct version
            awk -v version="$VERSION" -v log_entry="$CHANGE_LOG_ENTRY" '
              $0 ~ version { print; found=1; next }
              found && /^### CHANGE LOGS/ { print; inside_log=1; next }
              inside_log && NF { print; next }
              inside_log { print log_entry; inside_log=0; found=0 }
              { print }
            ' README.md > temp.md && mv temp.md README.md
          else
            # Prepend new version with a new CHANGE LOGS section
            echo -e "$VERSION\n\n$RELEASE_DATE\n\n### CHANGE LOGS\n\n$CHANGE_LOG_ENTRY\n\n$(cat README.md)" > README.md
          fi

      - name: Commit and push changes
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            set -e
            git config --global user.name "github-actions"
            git config --global user.email "github-actions@github.com"
            git add README.md
            git commit -m "Update README with latest changelog [skip ci]" || echo "No changes to commit"
            git push