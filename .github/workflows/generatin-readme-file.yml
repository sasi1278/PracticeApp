name: Update README on Main Branch

on:
  push:
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check last commit author
        id: check_commit
        run: |
          AUTHOR=$(git log -1 --pretty=format:'%an')
          if [[ "$AUTHOR" == "github-actions" || "$AUTHOR" == "$GITHUB_ACTOR" ]]; then
            echo "Skipping workflow to avoid infinite loop"
            exit 0
          fi

      - name: Ensure required tools are installed
        run: |
          set -e
          if ! command -v jq &> /dev/null; then
            echo "Error: jq is required but not installed."
            exit 1
          fi

      - name: Get version from package.json
        id: package_version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract latest commit messages
        id: latest_commit
        run: |
          set -e
          # Ensure README.md exists; if not, create an empty one.
          if [ ! -f README.md ]; then
            echo "README.md not found, creating a new one..."
            touch README.md
          fi

          # Try to get the last commit hash that modified README.md (using --follow to track history)
          LAST_VERSION_COMMIT=$(git log --follow -1 --pretty=format:'%h' -- README.md || echo "")
          echo "LAST_VERSION_COMMIT: ${LAST_VERSION_COMMIT}"

          if [ -z "$LAST_VERSION_COMMIT" ]; then
            # No prior commit for the current README? Use full history.
            COMMIT_RANGE=""
          else
            COMMIT_RANGE="${LAST_VERSION_COMMIT}..HEAD"
          fi

          # Build the changelog.
          # Use --follow so that even if the file was deleted/recreated, we get its full history.
          if [ -z "$COMMIT_RANGE" ]; then
            LOG_COMMAND="git log --follow HEAD --pretty=format:'%h %s' -- README.md"
          else
            LOG_COMMAND="git log --follow $COMMIT_RANGE --pretty=format:'%h %s' -- README.md"
          fi

          CHANGE_LOG=""
          while IFS= read -r line; do
            COMMIT_HASH=$(echo "$line" | awk '{print $1}')
            COMMIT_MESSAGE=$(echo "$line" | cut -d ' ' -f2-)

            # Normalize commit message (e.g., convert Jira IDs to uppercase with a hyphen)
            NORMALIZED_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -E 's/\b([a-zA-Z]+)[[:space:]-]+([0-9]+)\b/\U\1-\2/g')

            if [[ "$NORMALIZED_MESSAGE" =~ ^([A-Z]+-[0-9]+)[[:space:]]*(.*) ]]; then
              JIRA_ID="${BASH_REMATCH[1]}"
              COMMIT_TEXT="${BASH_REMATCH[2]}"
              JIRA_LINK="[${JIRA_ID}](https://jira.example.com/browse/${JIRA_ID})"
              CHANGE_LOG+="* <span style='color:skyblue;'>${JIRA_LINK}</span> - ${COMMIT_TEXT}\n"
            else
              CHANGE_LOG+="* ${COMMIT_HASH} - ${COMMIT_MESSAGE}\n"
            fi
          done <<< "$($LOG_COMMAND)"

          # Export CHANGE_LOG to GITHUB_ENV and GITHUB_OUTPUT for later steps.
          echo "CHANGE_LOG<<EOF" >> $GITHUB_ENV
          echo -e "$CHANGE_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "CHANGE_LOG<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGE_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update README
        run: |
          set -e
          # Load environment variables (VERSION and CHANGE_LOG)
          source $GITHUB_ENV
          VERSION_LABEL="## v${VERSION}"
          RELEASE_DATE="**RELEASE DATE:** $(date +'%Y-%m-%d')"
          CHANGE_LOG_ENTRY="${CHANGE_LOG}"
          
          # Ensure README.md exists.
          if [ ! -f README.md ]; then
            touch README.md
          fi

          # If the version header already exists, update its changelog section.
          if grep -q "$VERSION_LABEL" README.md; then
            awk -v version="$VERSION_LABEL" -v log_entry="$CHANGE_LOG_ENTRY" '
              $0 ~ version { print; found=1; next }
              found && /^### CHANGE LOGS/ { print; inside_log=1; next }
              inside_log && NF { print; next }
              inside_log { print log_entry; inside_log=0; found=0 }
              { print }
            ' README.md > temp.md && mv temp.md README.md
          else
            # Prepend the new version details at the top of README.md.
            echo -e "$VERSION_LABEL\n\n$RELEASE_DATE\n\n### CHANGE LOGS\n\n$CHANGE_LOG_ENTRY\n\n$(cat README.md)" > README.md
          fi

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          # Ensure README.md exists.
          if [ ! -f README.md ]; then
            touch README.md
          fi
          
          git add README.md
          
          # Commit only if there are changes.
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          
          git commit -m "Update README with latest changelog [skip ci]"
          git push origin main
